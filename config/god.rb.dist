rails_root = '/path/to/app'
pid_file = "#{rails_root}/tmp/pids/unicorn.pid"

God::Contacts::Slack.defaults do |s|
  s.url = 'slack webhook URL'
  s.notify_channel = true
end

God.contact :slack do |c|
  c.name = 'someone'
  c.group = 'ops'
  c.channel = 'ops'
end

God.watch do |w|
  w.name = 'zw'
  w.env = { 'RAILS_ENV' => 'production' }

  w.start = "unicorn -c #{rails_root}/config/unicorn.rb -E production -D"
  w.stop = "kill -QUIT `cat #{pid_file}`"
  w.restart = "kill -USR2 `cat #{pid_file}`"
  w.dir = rails_root
  w.pid_file = pid_file
  w.behavior :clean_pid_file

  w.interval = 30.seconds

  w.start_grace = 15.seconds
  w.restart_grace = 15.seconds

  # Determine the state on startup.
  w.transition(:init, { true => :up, false => :start }) do |on|
    # Transition from the init state to the up state if the process
    # is already running, or to the start state if it's not.
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # Determine when the process has finished starting:
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end

    on.condition(:tries) do |c|
      c.times = 3
      c.transition = :start
    end
  end

  # Start the process if it's not running.
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
      c.notify = 'ops'
    end
  end

  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = 100.megabytes
      c.times = [3, 5]
      c.notify = 'ops'
    end

    restart.condition(:cpu_usage) do |c|
      c.above = 50.percent
      c.times = 5
      c.notify = 'ops'
    end
  end

  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.notify = 'ops'

      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 30.minutes
      c.transition = :unmonitored

      c.retry_in = 10.minutes

      # If flapping is detected 5 times within 10 hours
      # give up (the process will have to be restarted manually).
      c.retry_times = 5
      c.retry_within = 10.hours
    end
  end
end
